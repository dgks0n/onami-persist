                                    ------
                                    Onami-Persist vs. Guice-Persist
                                    ------
                                    The Apache Onami developers team
                                    ------
                                     2014

~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

Onami-Persist vs. Guice-Persist

  <Onami-Persist> is inspired and based upon <Guice-Persist>. Most of the concepts and ideas have been adapted and/or reused;

  * <<<UnitOfWork>>> as the life cycle manager for <<<EntityManagers>>>;

  * <<<PersistFilter>>> for spanning a <<<UnitOfWork>>> around a request;

  * <<<PersistenceServic>>>e for starting and stopping the entire persistence engine;

  * <<<@Transactional>>> annotation on methods to span a transaction around the method.

  []

  The most notable changes to <Guice-Persist>:

  * Integrated support for multiple persistence units, JTA and custom annotation;

  * <<<EntityManager>>> cannot be injected. Instead an <<<EntityManagerProvider>>> has to be injected ({{{./emProvider.html}details}});

  * <<<@Transactional>>> annotation allows to specify which persistence units are involved in the transaction;

  * <<<UnitOfWork>>> has a new method <<<isActive()>>>;

  * Retrieving an <<<EntityManager>>> does not start a <<<UnitOfWork>>>. Instead it will throw an Exception if the <<<UnitOfWork>>> is not active;

  * <<<PersistenceService>>> can be restarted after it has been stopped.

